#+TITLE: My Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: latexpreview
#+STARTUP: content
#+OPTIONS: broken-links:t
#+OPTIONS: toc:2   
#+EXPORT_FILE_NAME: ./docs/index.html
-----
* Readme
*My Emacs config*

#+BEGIN_QUOTE
For GNU Emacs 27.2
#+END_QUOTE

** Credits
- https://github.com/rememberYou/.emacs.d/blob/master/config.org
- https://github.com/daviwil/emacs-from-scratch
- https://rgoswami.me/posts/org-note-workflow/
- https://github.com/MatthewZMD/.emacs.d

** Useful Resources
- http://doc.norang.ca/org-mode.html
- https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
- https://www.youtube.com/watch?v=3V3wIJgMeqE
- https://www.youtube.com/watch?v=e-SjhYZjIO8
- https://www.youtube.com/playlist?list=PL3bRG3rC5WYdMKiukj5RlFeuFHbCCgaJ9 [Emacs playlist for me]
** Screenshots
#+attr_html: :width 800 :height 450
[[./emacs_screenshot.png]]

#+attr_html: :width 800 :height 450
[[./emacs_ss_2.png]]
* Table of Content :TOC_2:TOC:
- [[#readme][Readme]]
  - [[#credits][Credits]]
  - [[#useful-resources][Useful Resources]]
  - [[#screenshots][Screenshots]]
- [[#running-emacs-daemon][Running emacs daemon]]
  - [[#enable][enable]]
  - [[#start][start]]
- [[#default][Default]]
  - [[#font-configuration][Font Configuration]]
- [[#general][General]]
- [[#package-setup-straight][Package Setup (Straight)]]
- [[#theme][Theme]]
  - [[#modus-themes][modus themes]]
- [[#modelines][Modelines]]
  - [[#doom-modeline][Doom modeline]]
- [[#misc][Misc]]
  - [[#all-the-icons][All the icons]]
- [[#undo-tree][Undo Tree]]
- [[#ivy][Ivy]]
- [[#evil][Evil]]
  - [[#evil-nerd-commenter][Evil Nerd commenter]]
  - [[#ein][ein]]
- [[#hydra][Hydra]]
- [[#projectile][Projectile]]
- [[#git][Git]]
  - [[#magit][magit]]
  - [[#git-gutter][Git gutter]]
- [[#org-mode][Org-Mode]]
  - [[#base-org-config][Base org config]]
  - [[#modern-org][Modern Org]]
  - [[#org-toc][Org Toc]]
  - [[#org-bullets][Org Bullets]]
  - [[#automatically-tangle-our-configorg-file-when-we-save-it][Automatically tangle our config.org file when we save it]]
  - [[#org-id][Org id]]
- [[#lsp][Lsp]]
- [[#treemacs][Treemacs]]
- [[#company][Company]]
- [[#term-vterm][term, vterm]]
- [[#dired][Dired]]
  - [[#diredel][Diredel]]
  - [[#dired-sidebar][Dired Sidebar]]
- [[#programming-languages-and-tools][Programming Languages and Tools]]
  - [[#bash][Bash]]
  - [[#dockerfile][Dockerfile]]
  - [[#latexox-latex][Latex/Ox Latex]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#yaml][YAML]]
- [[#org-download][Org download]]
- [[#ox-hugo][Ox-Hugo]]
- [[#org-roam][Org roam]]
  - [[#org-roam-ui][Org roam ui]]
- [[#org-roam-bibtex][Org-roam-bibtex]]
- [[#org-transclusion][Org transclusion]]
- [[#org-wild-notifier][Org Wild Notifier]]
- [[#dashboard][Dashboard]]
- [[#pdf-tools][Pdf-tools]]
- [[#mpc-and-musicemms][MPC and Music/emms]]
  - [[#emms][emms]]
- [[#deft][Deft]]
- [[#speed-type][Speed-Type]]
- [[#bibliography][bibliography]]
  - [[#ivy-bibtex][ivy-bibtex]]
  - [[#helm-bibtex][helm-bibtex]]
  - [[#setting-up][setting up]]
- [[#org-ref][Org ref]]
  - [[#org-ref-and-ivy-bibtex][Org ref and ivy bibtex]]
- [[#org-noter][org-noter]]
- [[#org-fc][org-fc]]
- [[#yasnippet][yasnippet]]
- [[#ledger][Ledger]]
- [[#vertico][Vertico]]
- [[#vim-like-fold][Vim like fold]]
  - [[#vimish-fold][vimish fold]]
  - [[#evil-vimish-fold][evil vimish fold]]
- [[#annotateel][Annotate.el]]
- [[#ripgrep][ripgrep]]
- [[#beacon][beacon]]
- [[#highlight-indent-guides][highlight indent guides]]
- [[#hl-line][hl-line]]
- [[#simplify-yesno-prompts][Simplify Yes/No Prompts]]
- [[#avy][Avy]]
- [[#flycheck-local-config][flycheck-local-config]]
  - [[#enable-downcase-c-x-c-l][enable downcase ~C-x C-l~]]
- [[#leader-keys-and-its-bindings][Leader keys and its bindings]]
  - [[#scaling-text][scaling text]]
  - [[#avy-search][avy search]]
  - [[#tab-bar-mode][tab-bar-mode]]
  - [[#bind-all-the-keys][bind all the keys]]
- [[#disable-keys][disable keys]]

* Running emacs daemon 
** enable 
#+begin_src 
systemctl --user enable --now emacs
#+end_src
** start 
#+begin_src 
systemctl --user start emacs.service
#+end_src
* Default
:PROPERTIES:
:ID:       e2499731-187c-492c-8857-5f304137b6fc
:END:
#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  ;; (menu-bar-mode -1)            ; Disable the menu bar
  (menu-bar-mode 1)            ; Disable the menu bar

  ;(hs-minor-mode 1)  ;enable hs minor mode hide/show code block

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; transparency 
  ;; (set-frame-parameter (selected-frame) 'alpha '(98 . 94))
#+end_src

** Font Configuration
#+begin_src emacs-lisp
;; Font Configuration ----------------------------------------------------------
(defun efs/set-font-faces ()
  (message "Setting faces!")
    ;(set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
    (set-face-attribute 'default nil :font "mononoki" :height 110 :weight 'regular)
    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "mononoki" :height 110 :weight 'regular)
    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "mononoki" :height 110 :weight 'regular)
)
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                ;; (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (efs/set-font-faces))))
    (efs/set-font-faces))

#+end_src

#+RESULTS:
| (lambda (frame) (with-selected-frame frame (efs/set-font-faces))) | evil-init-esc | doom-modeline-refresh-font-width-cache | doom-modeline-set-char-widths | x-dnd-init-frame |
* General
:PROPERTIES:
:ID:       2915a669-8e20-4e7a-b9c0-a52ad3c9e250
:END:
#+begin_src emacs-lisp
;; disable backup 
(setq backup-inhibited t)
#+end_src
* Package Setup (Straight)
:PROPERTIES:
:ID:       f9d162e0-3379-48c8-a29f-ac3c534645ec
:END:
#+begin_src emacs-lisp
;; Package System Setup
;; straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

;; old config
;; Initialize package sources

;; (require 'package)

;; (setq package-archives '(("melpa" . "https://melpa.org/packages/")
;;                          ("org" . "https://orgmode.org/elpa/")
;;                          ("elpa" . "https://elpa.gnu.org/packages/")))

;; (package-initialize)  ;; uncomment
;; (unless package-archive-contents
;;  (package-refresh-contents))

;; ;; Initialize use-package on non-Linux platforms
;; (unless (package-installed-p 'use-package)
;;    (package-install 'use-package))

;; (require 'use-package)
;; (setq use-package-always-ensure t)
;; Package System Setup End 

#+end_src
* Theme
:PROPERTIES:
:ID:       ff2fe024-efbc-421f-9e37-5efa177f06ac
:END:
#+begin_src emacs-lisp
    ;; theme
    ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    ;; (straight-use-package 'kaolin-themes)
    ;; (straight-use-package 'modus-themes)
    ;; (straight-use-package 'nord-theme)
    ;; (straight-use-package 'doom-themes)
    ;; (straight-use-package 'atom-one-dark-theme)
    ;; (straight-use-package 'gruvbox-theme)
    ;;; dark variants
    ;; Range:   233 (darkest) ~ 239 (lightest)
    ;; Default: 237
    ;; (load-theme 'gruvbox-dark-hard t)
    ;; (load-theme 'kaolin-light t)

    ;; (load-theme 'kaolin-temple t)
    ;; (load-theme 'nord t)
    ;; (load-theme 'atom-one-dark t)
    ;; (load-theme 'kanagawa t)

    ;; Load the theme of your choice:
    ;; (load-theme 'modus-operandi t) ;; OR (load-theme 'modus-vivendi)
     ;; (define-key global-map (kbd "M-<f5>") #'modus-themes-toggle)
#+end_src

#+RESULTS:
: t

** [[https://github.com/protesilaos/modus-themes][modus themes]]
- https://www.youtube.com/watch?v=JJPokfFxyFo

#+begin_src emacs-lisp
        (use-package modus-themes
          :straight (:type git :host github :repo "protesilaos/modus-themes") 
          :init
          ;; Add all your customizations prior to loading the themes
          (setq modus-themes-italic-constructs t
                modus-themes-bold-constructs nil
                modus-themes-mode-line '(borderless (padding . 4) (height . 0.9))
                modus-themes-paren-match '(bold intense)
                modus-themes-completions '((matches . (extrabold))
                                       (selection . (semibold accented))
                                       (popup . (accented intense)))
                modus-themes-syntax nil ;;'(faint) 
                modus-themes-region '(bg-only))

          ;; org theme config
          (setq modus-themes-org-blocks 'tinted-background ; 
                modus-themes-headings ; this is an alist: read the manual or its doc string
                      '((1 . (rainbow 1.3))
                        (2 . (rainbow 1.2))
                        (3 . (rainbow bold 1.1))
                        (t . (semilight 1.0)))
                ;; Important!
                modus-themes-scale-headings t)

          ;; Load the theme files before enabling a theme
          (modus-themes-load-themes)
          :config
          ;; Load the theme of your choice:
          (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
          :bind ("<f8>" . modus-themes-toggle))
#+end_src


#+RESULTS:
: modus-themes-toggle

* Modelines
** Doom modeline
:PROPERTIES:
:ID:       f81ab079-1b00-4891-944f-1ffb9d559547
:END:
#+begin_src emacs-lisp
   (use-package doom-modeline
     :straight t
     :init (doom-modeline-mode 1)
     :custom (
              (doom-modeline-height 25)
              ))
  (setq doom-modeline-icon t)
#+end_src

#+RESULTS:
: t

* Misc 
:PROPERTIES:
:ID:       cf8cf0f3-ef5d-4780-92fb-7bde1db727c9
:END:
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                              treemacs-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
  (use-package command-log-mode)
  
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode))
  
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
  
  (use-package counsel
    :straight t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
           ;; :config
           ;; (counsel-mode 1))
  
  
  ;(global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
  
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: t
** All the icons
:PROPERTIES:
:ID:       9741ce19-8760-452e-a626-a344a1d4322f
:END:
- https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
* Undo Tree
#+begin_src emacs-lisp
; undo and redo
(use-package undo-tree)
(global-undo-tree-mode t)
(setq undo-tree-auto-save-history 'nil)
#+end_src

#+RESULTS:
* Ivy
:PROPERTIES:
:ID:       71673541-eec1-4e8f-8d4d-825f2d323559
:END:
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-n" . ivy-next-line)
         ("C-p" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
     :straight t
     :init (ivy-rich-mode 1))
      
      
(use-package ivy-posframe
     :straight t
     :delight
     :config
     (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
     (ivy-posframe-mode 1))
#+end_src

#+RESULTS:
: t

* [[https://github.com/emacs-evil/evil][Evil]]
:PROPERTIES:
:ID:       2825ccfa-fb23-4fff-b903-44f0f810d070
:END:
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-emacs-state-cursor '("#b7c63f" bar))        
  (setq evil-normal-state-cursor '("#3faec6" bar))       
  (setq evil-insert-state-cursor '("#3fabc6" bar))       
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ; alternative C-x C-s
  (define-key evil-normal-state-map (kbd ",w") 'save-buffer)
  ; alternative C-w c
  (define-key evil-normal-state-map (kbd ",q") 'evil-window-delete) 

 ; (evil-normal-state-map C-r)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src
** Evil Nerd commenter
:PROPERTIES:
:ID:       e96ffd91-5d61-4c8e-ab66-3922cff6e68d
:END:
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
      (define-key evil-normal-state-map (kbd ", c SPC") 'evilnc-comment-or-uncomment-lines)
#+end_src   
** ein  
:PROPERTIES:
:ID:       d875c71c-defc-4d24-b0f7-76aa3c500bad
:END:
#+begin_src emacs-lisp
  (use-package ein)
  
  (use-package evil-numbers)
  (define-key evil-normal-state-map (kbd ", a") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd ", x") 'evil-numbers/dec-at-pt)
  
  ;;(require 'evil-numbers)
  ;;(global-set-key (kbd "c-c +") 'evil-numbers/inc-at-pt)
  ;;(global-set-key (kbd "c-c -") 'evil-numbers/dec-at-pt)
  ;;(global-set-key (kbd "c-c c-+") 'evil-numbers/inc-at-pt-incremental)
  ;;(global-set-key (kbd "c-c c--") 'evil-numbers/dec-at-pt-incremental)
  
#+end_src
* Hydra
:PROPERTIES:
:ID:       f39a44cf-c5aa-4856-823e-31dddc997020
:END:
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

* Projectile
:PROPERTIES:
:ID:       a01dafeb-011b-45b6-8b8e-91df3dc0edae
:END:
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Desktop/Workspace")
      (setq projectile-project-search-path '("~/Desktop/Workspace" "~/Desktop/ML")))
    (setq projectile-switch-project-action #'projectile-dired))
  
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
  
#+end_src

* Git  
:PROPERTIES:
:ID:       336e2f07-b992-48cf-a1b3-b4dec9866c85
:END:
** magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  
  ; (use-package evil-magit
  ;  :after magit)
      
#+end_src
** Git gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :straight t
  :defer 0.3
  :diminish
  :init (global-git-gutter-mode +1))
#+end_src

#+RESULTS:

* Org-Mode
:PROPERTIES:
:ID:       24f08993-1b27-4401-8f00-e8ffda3ef937
:END:
** Base org config
:PROPERTIES:
:ID:       9ddb755c-2c77-4ede-8efc-20c3e1b0e5db
:END:
#+begin_src emacs-lisp
    (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "mononoki" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    ;(set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

    (defun efs/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . efs/org-mode-setup)
      :config
      (setq org-ellipsis " ⤵")
      (setq org-hide-emphasis-markers t)

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      ;; timer notifiication sound
      (setq org-clock-sound "~/.emacs.d/ping.wav")

      (setq org-agenda-files
            '("~/Dropbox/org-notes/Tasks.org"
              "~/Dropbox/org-notes/todo.org"
              "~/Dropbox/org-notes/work/work_task.org"
             ))
      ;; "~/Dropbox/org-notes/Goals.org"
      ;; setting org for latex 
      (setq org-latex-compiler "xelatex")
      (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

      ;; (setq org-latex-minted-options '(("bgcolor" "bg")))

      (setq org-format-latex-options
            '(:foreground default
                          :background default
                          :scale 3.0
                          :html-foreground "Black"
                          :html-background "Transparent"
                          :html-scale 3.0
                          :matchers ("begin" "$1" "$$" "\\(" "\\[")))


      (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
              (sequence "GOAL(g)" "|" "UPDATE(u)")
              (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-tag-alist
            '((:startgroup)
                                            ; Put mutually exclusive tags here
              (:endgroup)
              ("@errand" . ?E)
                   ("@home" . ?H)
                   ("@work" . ?W)
                   ("agenda" . ?a)
                   ("planning" . ?p)
                   ("publish" . ?P)
                   ("batch" . ?b)
                   ("note" . ?n)
                   ("idea" . ?i)))

           (setq org-refile-targets
                 '(("Archive.org" :maxlevel . 1)
                   ("Tasks.org" :maxlevel . 1)))

           ;; Save Org buffers after refiling!
           (advice-add 'org-refile :after 'org-save-all-org-buffers)

           ;; Configure custom agenda views
           (setq org-agenda-custom-commands
                 '(("d" "Dashboard"
                    ((agenda "" ((org-deadline-warning-days 7)))
                     (todo "NEXT"
                           ((org-agenda-overriding-header "Next Tasks")))
                     (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

                   ("n" "Next Tasks"
                    ((todo "NEXT"
                           ((org-agenda-overriding-header "Next Tasks")))))

                   ("W" "Work Tasks" tags-todo "@work")

                   ;; Low-effort next actions
                   ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
                    ((org-agenda-overriding-header "Low Effort Tasks")
                     (org-agenda-max-todos 20)
                     (org-agenda-files org-agenda-files)))

                   ("w" "Workflow Status"
                    ((todo "WAIT"
                           ((org-agenda-overriding-header "Waiting on External")
                            (org-agenda-files org-agenda-files)))
                     (todo "REVIEW"
                           ((org-agenda-overriding-header "In Review")
                            (org-agenda-files org-agenda-files)))
                     (todo "PLAN"
                           ((org-agenda-overriding-header "In Planning")
                            (org-agenda-todo-list-sublevels nil)
                            (org-agenda-files org-agenda-files)))
                     (todo "BACKLOG"
                           ((org-agenda-overriding-header "Project Backlog")
                            (org-agenda-todo-list-sublevels nil)
                            (org-agenda-files org-agenda-files)))
                     (todo "READY"
                           ((org-agenda-overriding-header "Ready for Work")
                            (org-agenda-files org-agenda-files)))
                     (todo "ACTIVE"
                           ((org-agenda-overriding-header "Active Projects")
                            (org-agenda-files org-agenda-files)))
                     (todo "COMPLETED"
                           ((org-agenda-overriding-header "Completed Projects")
                            (org-agenda-files org-agenda-files)))
                     (todo "CANC"
                           ((org-agenda-overriding-header "Cancelled Projects")
                            (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Dropbox/org-notes/Tasks.org" "Inbox")
             "* TODO %?\n  %u\n  %a\n" :empty-lines 1)

            ("d" "Today")
            ("dd" "Today" entry (file+olp "~/Dropbox/org-notes/todo.org" "Today")
             "* TODO %?\n  %u\n  %a\n" :empty-lines 1)

            ("i" "Ideas")
            ("ii" "Idea" entry (file+olp "~/Dropbox/org-notes/Ideas.org" "Ideas")
             "* TODO %?\n  %u\n  %a\n" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Dropbox/org-notes/Journal.org")
             "\n* %<%i:%m %p> - Journal :Journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/notes/templates/daily.org")
             :clock-in :clock-resume
             :empty-lines 1)

            ("jm" "Meeting" entry
             (file+olp+datetree " ~/Dropbox/org-notes/Journal.org")
             "* %<%i:%m %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Dropbox/org-notes/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
            ))

           (define-key global-map (kbd "C-c j")
             (lambda () (interactive) (org-capture nil)))
           (define-key global-map (kbd "<f12>")
             (lambda () (interactive) (org-agenda nil)))

    (efs/org-font-setup))
#+end_src    


** Modern Org
- https://github.com/minad/org-modern
#+begin_src emacs-lisp
  (straight-use-package 'org-modern)

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  (global-org-modern-mode)
#+end_src

#+RESULTS:
: t
** Org Toc
:PROPERTIES:
:ID:       d57477f8-f796-4e94-9a50-adeb9e4dd563
:END:
~toc-org~ will maintain a table of contents at the first heading that has a :TOC: tag.
#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable))
#+end_src

** Org Bullets
:PROPERTIES:
:ID:       cb4706da-80de-45bb-81d3-cb07b2298746
:END:
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
  
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  
  (setq org-confirm-babel-evaluate nil)
  
  ;; this is needed as of org 9.2
  (require 'org-tempo)
  
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("py1" . "src python :results output"))
#+end_src

** Automatically tangle our config.org file when we save it
:PROPERTIES:
:ID:       b884a4cb-5526-49ff-b373-4439bee75f13
:END:

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/config.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org id
#+begin_src emacs-lisp
(require 'org-id)
(setq org-id-link-to-org-use-id t)
#+end_src

#+RESULTS:
: t

* Lsp
:PROPERTIES:
:ID:       f62daf5d-c380-4923-8e22-9447fd1c0f4a
:END:
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
  
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; or 'c-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-indentation nil)
    (lsp-enable-on-type-formatting nil)
    (lsp-modeline-code-actions-enable nil)
    (lsp-modeline-diagnostics-enable nil)
    (lsp-clients-clangd-args '("--header-insertion=never")))
  
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-max-height '10)
    (lsp-ui-doc-max-width '140)
    )

 (use-package lsp-ivy)
#+end_src

* Treemacs
:PROPERTIES:
:ID:       b251d95e-0dba-4f59-8174-5a95b9730693
:END:
#+begin_src emacs-lisp
   (use-package treemacs
     :straight t
     :defer t
     :init
     (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
     :config
     (progn
       (treemacs-filewatch-mode t)
       (treemacs-fringe-indicator-mode 'always)
       (pcase (cons (not (null (executable-find "git")))
                    (not (null treemacs-python-executable)))
         (`(t . t)
          (treemacs-git-mode 'deferred))
         (`(t . _)
          (treemacs-git-mode 'simple))))
     :bind
     (:map global-map
           ("M-0" . treemacs-display-current-project-exclusively)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t B"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)))
  
   (use-package lsp-treemacs
     :after lsp)
  
   (use-package treemacs-evil
     :after treemacs evil
     :straight t)
  
   (use-package treemacs-magit
     :after treemacs magit
     :straight t)
  
   (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
     :after treemacs persp-mode ;;or perspective vs. persp-mode
     :straight t
     :config (treemacs-set-scope-type 'perspectives))
#+end_src

* Company
:PROPERTIES:
:ID:       7cb75754-a89d-4513-8fac-4d0ef48a8520
:END:

#+begin_src emacs-lisp

 ;; (smartparens-global-mode t)

 (use-package company
   :after (:any lsp-mode org-mode org-roam-mode)
   :hook
   ((lsp-mode . company-mode)
    (org-mode . company-mode)
    (org-roam-mode . company-mode))
   :bind (:map company-active-map
               ("<tab>" . company-complete-selection))
   (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
   :custom
   (company-minimum-prefix-length 2)
   (company-idle-delay 0.25)
   (add-to-list 'company-backends 'company-capf)
   (setq completion-ignore-case t))

 ;; (setq completion-ignore-case t)

 (use-package company-box
   :hook (company-mode . company-box-mode))

#+end_src
* term, vterm  
:PROPERTIES:
:ID:       fe780876-029d-43be-ae00-137dec41f739
:END:

#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "zsh") ;; change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; use 'explicit-<shell>-args for shell-specific args
  
    ;; match the default bash shell prompt.  update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
  
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
  
  (use-package vterm
    :ensure t
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; set this to match your custom shell prompt
    (setq vterm-shell "zsh")                       ;; set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
  
#+end_src

#+RESULTS:

* Dired
:PROPERTIES:
:ID:       3ddf9839-e97c-40de-bfce-27c74af2d531
:END:
#+begin_src emacs-lisp
      (use-package dired
        :straight nil
        :commands (dired dired-jump)
        :bind (
               ("C-x C-j" . dired-jump))
        :custom ((dired-listing-switches "-agho --group-directories-first"))
        :config
        (evil-collection-define-key 'normal 'dired-mode-map
          "h" 'dired-single-up-directory
          "l" 'dired-single-buffer))


  (define-key dired-mode-map "j" 'dired-next-line)

      (use-package dired-single)

      (use-package all-the-icons-dired
             :hook (dired-mode . all-the-icons-dired-mode))

      (use-package dired-hide-dotfiles
             :hook (dired-mode . dired-hide-dotfiles-mode)
             :config
             (evil-collection-define-key 'normal 'dired-mode-map
               "H" 'dired-hide-dotfiles-mode))

#+end_src    

#+RESULTS:
| diredfl-mode | dired-hide-dotfiles-mode | all-the-icons-dired-mode | doom-modeline-set-project-modeline |

** Diredel
- https://github.com/purcell/diredfl
  #+begin_src emacs-lisp
 (use-package diredfl
     :straight t
     :hook (dired-mode . diredfl-mode))
    #+end_src


** Dired Sidebar
:PROPERTIES:
:ID:       9ba87b46-dca5-408a-aada-44259e95c1fd
:END:
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :straight t
    :commands (dired-sidebar-toggle-sidebar))   
#+end_src       
* Programming Languages and Tools
** Bash
:PROPERTIES:
:ID:       5d4d442a-fb69-499a-860f-2e6f19af501f
:END:
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (sh-mode . lsp))
#+end_src

** Dockerfile
:PROPERTIES:
:ID:       d1eeeac6-cd2b-4123-bc68-a15a100948b7
:END:
#+begin_src emacs-lisp
  (use-package dockerfile-mode :delight "δ" :mode "Dockerfile\\'")
#+end_src
** Latex/Ox Latex
:PROPERTIES:
:ID:       33e56579-cfa4-4c84-9fcc-157098a9550d
:END:
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  (put 'upcase-region 'disabled nil)
#+end_src
** Python      
:PROPERTIES:
:ID:       619497b5-82ba-46e1-b32f-9bad05a8d06c
:END:
#+begin_src emacs-lisp
    ;; (use-package lsp-python-ms
    ;;   :straight t
    ;;   :init (setq lsp-python-ms-auto-install-server t)
    ;;   :hook (python-mode . (lambda ()
    ;;                          (require 'lsp-python-ms)
    ;;                          (lsp-deferred))))  ; or lsp-deferred
    (use-package python-mode
      :straight nil 
      :hook
      ((python-mode . lsp-deferred)
       (python-mode . outline-minor-mode))
      :custom
      ;; NOTE: Set these if Python 3 is called "python3" on your system!
      (python-shell-interpreter "python")
      )
    ;;   ;; (dap-python-executable "python3")
    ;;   ;; (dap-python-debugger 'debugpy)
    ;;   ;; :config
    ;;   ;; (require 'dap-python))

    (use-package pyvenv
      :config
      (setenv "WORKON_HOME" "~/.pyenv/versions") 
      ;; (setenv "WORKON_HOME" "~/anaconda3/envs")
      (pyvenv-mode 1)
      (pyvenv-tracking-mode 1))

#+end_src    

#+RESULTS:
: t

** Rust    
:PROPERTIES:
:ID:       5bef5bd6-a5bc-4306-a669-55aaa417bb7b
:END:
#+begin_src emacs-lisp
  (use-package rustic
    :mode ("\\.rs\\'" . rustic-mode)
    :config
    (setq rustic-lsp-client 'lsp-mode
          rustic-lsp-server 'rust-analyzer
          rustic-analyzer-command '("~/.local/bin/rust-analyzer")))
#+end_src    
** YAML
:PROPERTIES:
:ID:       d11b4716-c065-4337-adb3-7fc0c47bca07
:END:
#+begin_src emacs-lisp
  (use-package yaml-mode
    :delight "ψ"
    :hook (yaml-mode . lsp-deferred)
    :mode ("\\.\\(yaml\\|yml\\)\\'"))
#+end_src

* Org download
:PROPERTIES:
:ID:       64ddaafe-2bfd-4252-8f39-54a1b10fcade
:END:
#+begin_src emacs-lisp
  
  (use-package org-download
    :after org
    :bind
    (:map org-mode-map
          (("s-Y" . org-download-screenshot)
           ("s-y" . org-download-yank))))
#+end_src
* Ox-Hugo
:PROPERTIES:
:ID:       c2210211-7c1c-47a5-8665-a15f131b0c44
:END:
#+begin_src emacs-lisp
  (use-package ox-hugo
    :straight t
    :after ox)
#+end_src
* [[https://github.com/org-roam/org-roam][Org roam]]
:PROPERTIES:
:ID:       f65f214d-1bb3-4b28-9d74-6304f89ddadc
:END:

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org-notes/"))
    (org-roam-dailies-directory "journals/")
    (org-roam-file-extensions '("org"))
    :bind (:map global-map
                (("C-c n l" . org-roam-buffer-toggle)
                 ("C-c n f" . org-roam-node-find)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-node-insert))
                (("C-c n I" . org-roam-insert-immediate)))
    :config
    (org-roam-setup) 
    (setq org-roam-auto-replace-fuzzy-links nil)
    (setq org-roam-completion-everywhere t)
    (setq org-roam-prefer-id-links t)
    (setq org-roam-graph-exclude-matcher '("pages" "journals"))
    (setq org-roam-capture-templates
          '(("d" "default" plain (file "~/Dropbox/org-notes/templates/plainTemplate.org")
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title} \n#+date: %(format-time-string \"%Y-%m-%d %H:%M\") \n")
             :unnarrowed t)
            ("b" "book" plain (file "~/Dropbox/org-notes/templates/plainTemplate.org")
             :if-new (file+head "book/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title} \n#+date: %(format-time-string \"%Y-%m-%d %H:%M\") \n")
             :unnarrowed t)
            ("p" "project journal" plain (file "~/Dropbox/org-notes/templates/plainTemplate.org")
             :if-new (file+head "p_journals/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title} \n#+date: %(format-time-string \"%Y-%m-%d %H:%M\") \n")
             :unnarrowed t)
            ("w" "work" plain (file "~/Dropbox/org-notes/templates/workTemplate.org")
             :if-new (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title} \n#+date: %(format-time-string \"%Y-%m-%d %H:%M\") \n")
             :unnarrowed t)))

    ;; Org-roam interface
    ;; the directory of the node
    (cl-defmethod org-roam-node-directories ((node org-roam-node))
      (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (format "(%s)" (car (f-split dirs)))
        ""))

    ;; backlinks count
    (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
      (let* ((count (caar (org-roam-db-query
                           [:select (funcall count source)
                                    :from links
                                    :where (= dest $s1)
                                    :and (= type "id")]
                           (org-roam-node-id node)))))
        (format "[%d]" count)))
    ;; 1 title tags 
    (setq org-roam-node-display-template "${backlinkscount:4} ${directories:15} ${title:80} ${tags:60}")
    )

  (setq org-roam-v2-ack t)

  ;; for org-roam-buffer-toggle
  (add-to-list 'display-buffer-alist
               '(("\\*org-roam\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.23)
                  (window-height . fit-window-to-buffer))))
#+end_src

#+RESULTS:
| (\*org-roam\* (display-buffer-in-direction) (direction . right) (window-width . 0.23) (window-height . fit-window-to-buffer)) |

** Org roam ui
:PROPERTIES:
:ID:       10440275-1f2d-4169-8f4f-325cc9244d8e
:END:
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (org-roam . org-roam-ui-mode))
#+end_src

*** simple httpd
:PROPERTIES:
:ID:       741484fc-8db1-405e-a7a1-4ef75df32818
:END:
#+begin_src emacs-lisp
  ;; org  roam ui
  (straight-use-package 'simple-httpd)
#+end_src
* Org-roam-bibtex
:PROPERTIES:
:ID:       a0b93825-0d6b-457a-a30c-b83eab1ab2c2
:END:
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :straight t
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (require 'org-ref))
#+end_src

#+RESULTS:
| org-roam-bibtex-mode | company-mode |

* Org transclusion
:PROPERTIES:
:ID:       1739d607-0384-48fc-a075-6889b18e7d3c
:END:
#+begin_src emacs-lisp
  (use-package org-transclusion
    :straight '(org-transclusion :host github
                                 :repo "nobiot/org-transclusion"
                                 :branch "main"
                                 :files ("*.el"))
    :after org
    :bind (:map global-map
                (("<f12>" . #'org-transclusion-add)
                 ("C-c n t" . #'org-transclusion-mode)
                 )))
#+end_src

* Org Wild Notifier 
:PROPERTIES:
:ID:       53f7336a-ab19-414f-a568-51acc31be8b0
:END:
- https://github.com/akhramov/org-wild-notifier.el
#+begin_src emacs-lisp
  (use-package org-wild-notifier
    :ensure t
    :init (org-wild-notifier-mode 1)
    :custom
    (alert-default-style 'libnotify)
    (org-wild-notifier-alert time '(1 5 30))
    (org-wild-notifier-keyword-whitelist '("TODO" "NEXT"))
    (org-wild-notifier-alert-times-property "WILD_NOTIFY")
    (org-wild-notifier-notification-title "Org Alert!"))

  (setq alert-fade-time 30)
#+end_src

#+RESULTS:
: 30

* Dashboard
:PROPERTIES:
:ID:       2626a10c-6f3e-4fb5-a192-248866bb6c2c
:END:
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (setq dashboard-banner-logo-title "  felladog")
    (setq dashboard-startup-banner "~/.emacs.d/pc.png")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'projectile) 
    (setq dashboard-items '((recents  . 5)
                            (projects . 3)
                            (bookmarks . 5)
                            (agenda . 5)))
    (setq dashboard-footer-messages '("Happy learning!"))

    (dashboard-setup-startup-hook))
#+end_src
* Pdf-tools
:PROPERTIES:
:ID:       1a31129d-6ac0-4fcf-85bc-a8bcb9cfd003
:END:
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual ;; manually update
    :straight t
    :config
    ;; initialise
    ;; (pdf-tools-install)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; use normal isearch
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src

#+RESULTS:
: t

* MPC and Music/emms
:PROPERTIES:
:ID:       2f516bfa-363b-4ab0-988c-ae2d05e780bb
:END:
#+begin_src emacs-lisp
  (setq
   mpc-browser-tags '(Filename)
   mpc-host "0.0.0.0:6900"
   mpc-songs-format "%-20{Artist} %26{Title} %40{Album} %4{Time}")

  (global-set-key (kbd "C-c C-p") 'mpc-play-at-point)
  ;; song_columns_list_format = "(2)[magenta]{} (23)[red]{a} (26)[yellow]{t|f} (40)[green]{b} (4)[blue]{l}"
#+end_src
** emms

- https://github.com/daedreth/UncleDavesEmacs#emms-with-mpd

#+begin_src emacs-lisp
  (use-package emms
    :straight t
    :ensure t
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-server-name "0.0.0.0")
    (setq emms-player-mpd-server-port "6900")
    :bind
    ("<f5>" . emms-previous)
    ("<f7>" . emms-next)
    ("<f6>" . emms-pause)
    )
  (setq emms-player-mpd-music-directory "~/Music/")
#+end_src

#+RESULTS:
: ~/Music/

* [[https://github.com/jrblevin/deft][Deft]]
:PROPERTIES:
:ID:       eab8071e-7609-47d7-aebc-56a3a74153b7
:END:
#+begin_src emacs-lisp
  (use-package deft
    :config
    (setq deft-directory "~/Dropbox/org-notes/" 
          deft-extensions '("org")
          deft-recursive t
          deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
          deft-use-filename-as-title t)
    :bind
    ("C-c n d" . deft))
#+end_src
* [[https://github.com/parkouss/speed-type/][Speed-Type]]
:PROPERTIES:
:ID:       0a8c764e-696a-4c0f-b110-4e8546f6ef12
:END:
#+begin_src emacs-lisp
  (straight-use-package 'speed-type)
#+end_src

Executing M-x speed-type-text will start the typing exercise.

* bibliography
** ivy-bibtex
:PROPERTIES:
:ID:       8fe71e76-0567-4411-9474-e8bfcea3864f
:END:
#+begin_src emacs-lisp
  (straight-use-package 'ivy-bibtex)
#+end_src

#+RESULTS:
: t

** helm-bibtex
:PROPERTIES:
:ID:       bb1011a3-834e-4b08-8130-d7641d217615
:END:
#+begin_src emacs-lisp
  (straight-use-package 'helm-bibtex)
#+end_src
** setting up
:PROPERTIES:
:ID:       e243fd80-56dd-40dd-ba0f-2da3903c5579
:END:
#+begin_src emacs-lisp
  (setq
   bibtex-completion-notes-path "~/Dropbox/org-notes/paper_notes/"
   bibtex-completion-bibliography "~/Dropbox/org-notes/bib/zotBiB.bib"
   bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files(concat
                                                   "#+TITLE: ${title}\n"
                                                   "#+ROAM_KEY: cite:${=key=}\n"
                                                   "* TODO Notes\n"
                                                   ":PROPERTIES:\n"
                                                   ":Custom_ID: ${=key=}\n"
                                                   ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
                                                   ":AUTHOR: ${author-abbrev}\n"
                                                   ":JOURNAL: ${journaltitle}\n"
                                                   ":DATE: ${date}\n"
                                                   ":YEAR: ${year}\n"
                                                   ":DOI: ${doi}\n"
                                                   ":URL: ${url}\n"
                                                   ":END:\n\n"
                                                   )
   )
#+end_src

#+RESULTS:

* Org ref
:PROPERTIES:
:ID:       3f04ebcf-bbad-4ce4-85ae-83b6061a335e
:END:
#+begin_src emacs-lisp
  (straight-use-package 'org-ref)
#+end_src

#+RESULTS:
: t

** Org ref and ivy bibtex
:PROPERTIES:
:ID:       1fb20d4e-be37-43b4-ae9b-e0c1251e65e3
:END:
#+begin_src emacs-lisp
  (require 'org-ref-ivy)

  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-ivy
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
#+end_src

#+RESULTS:
| lambda | (_) | (org-ref-citation-hydra/body) |
* org-noter
:PROPERTIES:
:ID:       f9aebc7e-8144-45aa-95a2-6cd5a1a83b76
:END:
#+begin_src emacs-lisp
  (use-package org-noter
    :straight t
    :after (:any org pdf-view)
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     org-noter-notes-search-path (list "/home/Dropbox/org-notes/paper_notes/" )
     )
    )

#+end_src

#+RESULTS:
: t

* org-fc
:PROPERTIES:
:ID:       b1461f95-c813-4a09-9805-db86e986450a
:END:
#+begin_src emacs-lisp
  (straight-use-package
   '(org-fc
     :type git :repo "https://git.sr.ht/~l3kn/org-fc"
     :files (:defaults "awk" "demo.org")
     :after org
     :custom (org-fc-directories '("~/Dropbox/org-notes/orgfc/"))
     :config
     (require 'org-fc-hydra)))
#+end_src

#+RESULTS:
: t

* yasnippet
:PROPERTIES:
:ID:       ca0ab8b9-d2e1-4bd7-a124-26924c9ea5db
:END:
#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"                 ;; personal snippets
          ))
  (yas-global-mode 1)
  ;; tetsst
#+end_src

* Ledger
:PROPERTIES:
:ID:       aa4259e3-a9aa-449e-8ace-18a44af2258c
:END:

- https://github.com/ledger/ledger-mode

#+begin_src emacs-lisp
  (use-package ledger-mode
    :straight t
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.dat\\'")
#+end_src

* Vertico
:PROPERTIES:
:ID:       c24d592a-3ab6-485b-b903-34916d455c87
:END:
- https://github.com/minad/vertico
- https://www.youtube.com/watch?v=J0OaRy85MOo
:PROPERTIES:
:ID:       0272e9ed-9736-4317-98e3-9353cde73c4d
:END:

#+begin_src emacs-lisp

  ;; ;; Enable vertico
  ;; (use-package vertico
  ;;   :straight t
  ;;   :ensure t
  ;;   :init
  ;;   (vertico-mode)
  ;; 
  ;;   ;; Different scroll margin
  ;;   ;; (setq vertico-scroll-margin 0)
  ;; 
  ;;   ;; Show more candidates
  ;;   ;; (setq vertico-count 20)
  ;; 
  ;;   ;; Grow and shrink the Vertico minibuffer
  ;;   ;; (setq vertico-resize t)
  ;; 
  ;;   ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;;   (setq vertico-cycle t)
  ;;   )
  ;; 
  ;; ;; Optionally use the `orderless' completion style. See
  ;; ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; ;; expansion. `partial-completion' is important for wildcard support.
  ;; ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; ;; wildcard. You may also give the `initials' completion style a try.
  ;; (use-package orderless
  ;;   :straight t
  ;;   :ensure t
  ;;   :init
  ;;   ;; Configure a custom style dispatcher (see the Consult wiki)
  ;;   ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;   ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  ;;   (setq completion-styles '(orderless)
  ;;         completion-category-defaults nil
  ;;         completion-category-overrides '((file (styles partial-completion)))))
  ;; 
  ;; ;; Persist history over Emacs restarts. Vertico sorts by history position.
  ;; (use-package savehist
  ;;   :straight t
  ;;   :ensure t
  ;;   :init
  ;;   (savehist-mode))
#+end_src

#+RESULTS:

* Vim like fold 
** vimish fold
:PROPERTIES:
:ID:       d8efb4cd-fa48-4899-b952-54f759a392cd
:END:
https://github.com/matsievskiysv/vimish-fold
:PROPERTIES:
:ID:       0f9ff3f3-d6e2-416b-b86e-9384ba43d0ba
:END:
#+begin_src emacs-lisp
  ;; (use-package vimish-fold 
  ;;    :straight t
  ;;    :after (evil))
#+end_src

#+RESULTS:

** evil vimish fold
:PROPERTIES:
:ID:       23820a52-23e1-4361-b051-efbcf7aae1b2
:END:
https://github.com/alexmurray/evil-vimish-fold

#+begin_src emacs-lisp
  ;; (use-package evil-vimish-fold 
  ;;    :straight t
  ;;    :after vimish-fold
  ;;    :init
  ;;    ;; (setq evil-vimish-fold-mode-lighter "⮒")
  ;;    (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
  ;;    :config
  ;;    (global-evil-vimish-fold-mode))
#+end_src

#+RESULTS:
: t

* Annotate.el
- https://github.com/bastibe/annotate.el
#+begin_src emacs-lisp
  (straight-use-package 'annotate\.el)
#+end_src

* ripgrep
- https://github.com/nlamirault/ripgrep.el
#+begin_src emacs-lisp
  (straight-use-package 'ripgrep)
#+end_src 

* beacon
- https://github.com/Malabarba/beacon

  #+begin_src emacs-lisp
;; (straight-use-package 'beacon)
;; (beacon-mode 1)
  #+end_src

#+RESULTS:
: t

* highlight indent guides
- https://github.com/DarthFennec/highlight-indent-guides

  #+begin_src emacs-lisp
(straight-use-package 'highlight-indent-guides)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'bitmap)
  #+end_src

* hl-line 

#+begin_src emacs-lisp
(straight-use-package 'hl-line)
(set-face-background 'hl-line "#c6c6c6")
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'org-mode-hook 'hl-line-mode)
#+end_src

#+RESULTS:

* [[https://github.com/MatthewZMD/.emacs.d#simplify-yesno-prompts][Simplify Yes/No Prompts]]

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)
#+end_src

* Avy
- https://github.com/abo-abo/avy

  #+begin_src emacs-lisp
    (use-package avy
      :straight t
      :bind
         (("C-c a c" . avy-goto-char-timer)
          ("C-c a l" . avy-goto-line))
      :custom
         (avy-timeout-seconds 0.5)
         (avy-style 'pre)
      :custom-face
         (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))));
  #+end_src

  #+RESULTS:
  : avy-goto-line
* flycheck-local-config
- https://github.com/flycheck/flycheck/issues/1762

#+begin_src emacs-lisp
    (defvar-local my/flycheck-local-cache nil)

    (defun my/flycheck-checker-get (fn checker property)
      (or (alist-get property (alist-get checker my/flycheck-local-cache))
          (funcall fn checker property))) 

    (advice-add 'flycheck-checker-get :around 'my/flycheck-checker-get)

    (add-hook 'lsp-managed-mode-hook
              (lambda ()
                (when (derived-mode-p 'python-mode)
                  (add-to-list 'flycheck-checkers 'python-mypy t)
                  (setq my/flycheck-local-cache '((lsp . ((next-checkers . (python-mypy))))))
               )))
#+end_src

** enable downcase ~C-x C-l~ 
#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
#+end_src
* Leader keys and its bindings
#+begin_src emacs-lisp
   ; stream 3
   (use-package general
       :config
       (general-create-definer rune/leader-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")
    )
#+end_src

** scaling text

#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src

** avy search
#+begin_src emacs-lisp
  (defhydra hydra-avy-search(:timeout 2)
    "avy search text"
    ("c" avy-goto-char-timer "goto char")
    ("l" avy-goto-line "goto line")
    ("r" avy-resume "resume old search")
    ("f" nil "finished" :exit t))
#+end_src

#+RESULTS:
: hydra-avy-search/body

** tab-bar-mode
#+begin_src emacs-lisp
    (defhydra hydra-tab-switch(:timeout 4)
      "tab switch "
      ("h" tab-bar-switch-to-prev-tab "Previous tab")
      ("l" tab-bar-switch-to-next-tab"Next tab")
      ("s" tab-bar-switch-to-tab "Switch tab")
      ("2" tab-new "New tab")
      ("0" tab-close "Close tab")
      ("f" nil "finished" :exit t))
#+end_src

#+RESULTS:
: hydra-tab-switch/body
** bind all the keys
#+begin_src emacs-lisp
  (rune/leader-keys
      "s" '(hydra-text-scale/body :which-key "scale text")
      "t" '(hydra-tab-switch/body :which-key "switch tab")
      "a" '(hydra-avy-search/body :which-key "avy search"))

#+end_src

#+RESULTS:
* disable keys
#+begin_src emacs-lisp
(define-key dired-next-line (kbd "SPC") nil)
#+end_src
